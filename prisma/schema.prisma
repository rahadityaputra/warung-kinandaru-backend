generator client {
  output   = "../src/generated/prisma"
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

enum PaymentMethod {
  CASH
  CARD
  QRIS
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(255)
  description  String?  @db.Text
  stock        Int      @default(0)
  imageUrl     String?  @map("image_url") @db.VarChar(255)
  categoryId   Int      @map("category_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  category        Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  priceHistory    ProductPriceHistory[] // Hubungan dengan riwayat harga produk
  productSuppliers ProductSupplier[]     // Hubungan dengan pemasok produk
  transactionItems TransactionItem[]     // Hubungan dengan item transaksi

  @@map("products") // Memetakan model Product ke tabel 'products'
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model ProductPriceHistory {
  id              Int       @id @default(autoincrement())
  productId       Int       @map("product_id")
  price           Decimal     @db.Decimal(10, 2)
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  createdAt       DateTime  @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, startDate(sort: Desc)])
  @@map("product_price_history") 
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(255)
  contactPerson String?  @map("contact_person") @db.VarChar(255)
  phone         String?  @db.VarChar(50)
  email         String?  @db.VarChar(255)
  address       String?  @db.Text
  notes         String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  productSuppliers ProductSupplier[]

  @@map("suppliers")
}

model ProductSupplier {
  productId        Int       @map("product_id")
  supplierId       Int       @map("supplier_id")
  supplierSku      String?   @map("supplier_sku") @db.VarChar(255)
  unitCost         Decimal     @map("unit_cost") @db.Decimal(10, 2)
  minOrderQuantity Int?      @map("min_order_quantity") @default(1)
  leadTimeDays     Int?      @map("lead_time_days")
  lastPurchasedAt  DateTime? @map("last_purchased_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@id([productId, supplierId]) // Composite Primary Key
  @@map("product_suppliers") 
}

model TransactionType {
  id                       Int       @id @default(autoincrement())
  name                     String    @unique @db.VarChar(100)
  description              String?   @db.Text
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("transaction_types")
}

model Transaction {
  id                Int             @id @default(autoincrement())
  transactionId     String          @unique @map("transaction_id") @db.VarChar(255)
  transactionTypeId Int             @map("transaction_type_id")
  totalAmount       Decimal           @map("total_amount") @db.Decimal(10, 2)
  paymentMethod     PaymentMethod   @map("payment_method")
  amountPaid        Decimal           @map("amount_paid") @db.Decimal(10, 2)
  changeDue         Decimal           @map("change_due") @db.Decimal(10, 2)
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  transactionType TransactionType @relation(fields: [transactionTypeId], references: [id], onDelete: Restrict)
  items           TransactionItem[] 
  @@index([createdAt(sort: Desc)]) 
  @@map("transactions") 
}

model TransactionItem {
  id             Int       @id @default(autoincrement())
  transactionId  Int       @map("transaction_id")
  productId      Int       @map("product_id")
  quantity       Int
  price          Decimal     @db.Decimal(10, 2) 
  subtotal       Decimal     @db.Decimal(10, 2)
  discount       Decimal     @db.Decimal(10, 2) @default(0) // Diskon per item
  originalPrice  Decimal?    @map("original_price") @db.Decimal(10, 2)
  createdAt      DateTime  @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("transaction_items")
}
